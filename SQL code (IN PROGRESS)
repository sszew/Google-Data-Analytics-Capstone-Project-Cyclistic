--------QUERY 1: NUMBER OF RIDERS AND THE AVERAGE, MEDIAN, AND STANDARD DEVIATION OF THE RIDELENGTHS IN EACH MEMBERSHIP GROUP (MEMBER VS. CASUAL)
OVER THE PERIOD OF NOV. 2021 - OCT. 2022------------

WITH allmonths AS (
  
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.nov2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.dec2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jan2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.feb2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.mar2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.apr2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.may2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jun2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jul2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.aug2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.sep2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.oct2022`)

--As discussed at https://iamhectorotero.github.io/median-and-group-by/, PERCENTILE_CONT is a non-aggregate function, so we cannot use it along with a GROUP BY clause to calculate the median  --

  SELECT member_casual, COUNT(*) AS count, median_ridelength/60 AS med_ridelength, AVG(ridelength)/60 AS avg_ridelenth, STDDEV(ridelength)/60 AS sd_ridelength
  FROM (SELECT *, PERCENTILE_CONT(ridelength, 0.5) OVER(PARTITION BY member_casual) AS median_ridelength
        FROM allmonths
        WHERE allmonths.ridelength > 0 AND allmonths.ridelength < 86400)
  GROUP BY member_casual, median_ridelength
  
  
  
  --------QUERY 2: PROPORTION OF EACH MEMBERSHIP GROUP (MEMBER VS. CASUAL) USING EACH TYPE OF BIKE (CLASSIC, ELECTRIC, DOCKED)-------------
  WITH allmonths AS (
  
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.nov2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.dec2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jan2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.feb2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.mar2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.apr2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.may2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jun2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jul2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.aug2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.sep2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.oct2022`)

--I found this page very helpful: https://stackoverflow.com/questions/65247494/calculate-percentages-of-count-in-sql-relative-to-the-category --
  SELECT member_casual, rideable_type, COUNT(*)/(SUM(COUNT(*)) OVER(PARTITION BY member_casual)) AS pct_of_membertype
  FROM (SELECT *
        FROM allmonths
        WHERE allmonths.ridelength > 0 AND allmonths.ridelength < 86400)
  GROUP BY member_casual, rideable_type
