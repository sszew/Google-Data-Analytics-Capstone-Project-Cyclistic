                                                               DATA CLEANING
                                                            
----------QUERY 1: Checking for invalid entries in the "member_casual" column, referring to the membership status of a user. A user can either----------
----------be a "member" or a "casual" rider. There were no invalid entries in the dataset.----------

WITH allmonths AS (
  
  SELECT *
  FROM `decoded-cove-381306.Months.nov2021`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.dec2021`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.jan2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.feb2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.mar2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.apr2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.may2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.jun2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.jul2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.aug2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.sep2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.oct2022`)

  SELECT DISTINCT member_casual
  FROM allmonths;


----------QUERY 2: Checking for invalid entries in the "rideable_type" column, referring to the type of bike used. A bike can either----------
----------be "electric_bike", "docked_bike", or "classid_bike". There were no invalid entries in the dataset.----------

WITH allmonths AS (
  
  SELECT *
  FROM `decoded-cove-381306.Months.nov2021`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.dec2021`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.jan2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.feb2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.mar2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.apr2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.may2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.jun2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.jul2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.aug2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.sep2022`
  UNION ALL
  SELECT *
  FROM `decoded-cove-381306.Months.oct2022`)

  SELECT DISTINCT rideable_type
  FROM allmonths;


-----------QUERY 3: Checking whether there were any invalid entries in the "started_at" and "ended_at" columns, referring to the dates/times----------
-----------that a ride began and ended, respectively. This query creates a new column, "ridelength", which subtracts "ended_at" from "started_at",----------
-----------resulting in the duration of a ride in seconds. Minimum and maximum ride lengths are then calculated to identify the range of entries.----------
-----------Negative ride lengths are nonsensical because a ride cannot end at an earlier time than it began.----------
-----------Conversely, ride lengths that are too long are also suspect. What constitutes "too long" will be addressed in later queries.----------


WITH allmonths AS (
  
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.nov2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.dec2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jan2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.feb2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.mar2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.apr2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.may2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jun2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jul2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.aug2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.sep2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.oct2022`)

  SELECT MIN(ridelength) AS min_ridelength, MAX(ridelength) AS max_ridelength
  FROM allmonths;

                                                              ANALYSIS
                                                              
                                                         General Differences

----------QUERY 4: Calculating the number of riders, mean ride lengths (in minutes), median ride lengths (in minutes), and----------
----------standard deviations of the ride lengths (in minutes), grouped by membership type.----------

WITH allmonths AS (
  
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.nov2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.dec2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jan2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.feb2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.mar2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.apr2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.may2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jun2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jul2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.aug2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.sep2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.oct2022`)

----------As discussed at https://iamhectorotero.github.io/median-and-group-by/, PERCENTILE_CONT is a non-aggregate function,----------
----------so we cannot use it along with a GROUP BY clause to calculate the median.----------

  SELECT member_casual, COUNT(*) AS count, median_ridelength/60 AS med_ridelength, AVG(ridelength)/60 AS avg_ridelenth, STDDEV(ridelength)/60 AS sd_ridelength
  FROM (SELECT *, PERCENTILE_CONT(ridelength, 0.5) OVER(PARTITION BY member_casual) AS median_ridelength
        FROM allmonths
        WHERE allmonths.ridelength > 0 AND allmonths.ridelength < 86400)
  GROUP BY member_casual, median_ridelength
  
  
  
  ----------QUERY 5: Proportion of each membership group using a particular bike.-------------
  
  WITH allmonths AS (
  
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.nov2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.dec2021`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jan2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.feb2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.mar2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.apr2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.may2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jun2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jul2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.aug2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.sep2022`
  UNION ALL
  SELECT *, TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.oct2022`)

----------I found this page very helpful in the following step: https://stackoverflow.com/questions/65247494/calculate-percentages-of-count-in-sql-relative-to-the-category ----------
  SELECT member_casual, rideable_type, COUNT(*)/(SUM(COUNT(*)) OVER(PARTITION BY member_casual)) AS pct_of_membertype
  FROM (SELECT *
        FROM allmonths
        WHERE allmonths.ridelength > 0 AND allmonths.ridelength < 86400)
  GROUP BY member_casual, rideable_type
  
  
                                                      Differences over the Day
  
 ----------QUERY 6: Distribution of rides by time of day by membership type. "mid-night" is 12 AM to 6 AM, "morning" is 6 AM to 12 PM,----------
 ----------"afternoon" is 12 PM to 6 PM, "evening" is 6 PM to 12 AM.----------
  
  WITH allmonths AS (
  
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.nov2021`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.dec2021`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jan2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.feb2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.mar2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.apr2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.may2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jun2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.jul2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.aug2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.sep2022`
  UNION ALL
  SELECT *, CASE WHEN EXTRACT(HOUR FROM started_at) >= 0 AND EXTRACT(HOUR FROM started_at) < 6 THEN 'mid-night'
                  WHEN EXTRACT(HOUR FROM started_at) >= 6 AND EXTRACT(HOUR FROM started_at) < 12 THEN 'morning'
                  WHEN EXTRACT(HOUR FROM started_at) >= 12 AND EXTRACT(HOUR FROM started_at) < 18 THEN 'afternoon'
                  ELSE 'evening' END AS timeofday, 
        TIMESTAMP_DIFF(ended_at, started_at, SECOND) AS ridelength
  FROM `decoded-cove-381306.Months.oct2022`)

SELECT member_casual, timeofday, COUNT(*)/(SUM(COUNT(*)) OVER(PARTITION BY member_casual)) AS pct_of_membertype
  FROM (SELECT *
        FROM allmonths
        WHERE allmonths.ridelength > 0 AND allmonths.ridelength < 86400)
  GROUP BY member_casual, timeofday
  
  
  
  
                                                  Differences over the Week
                                                  
                                                  

