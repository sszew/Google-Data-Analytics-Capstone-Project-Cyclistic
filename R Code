#Capstone Project for the Google Data Analytics Professional Certificate. Powerpoint presentation for the 
#project can be found here: https://docs.google.com/presentation/d/1Aq0FibYiF0786xv_BOLffQiyBRzEG5hCepiRGYpT9Ag/edit?usp=sharing

#"data.table" allows us to use fread() to import data. fread() uses less memory in R than read.csv
install.packages("data.table")
library(data.table)

#installing useful packages
install.packages("dplyr")                       
install.packages("tidyverse")

library("dplyr")                                    
library("tidyverse")

#allows us to create breaks for creating the time_of_day column. 'lubridate' is in 'tidyverse' but is not a core package, so we need to load it separately.
library(lubridate)

#import data. note direction of slashes(two slashes each time)
nov2021 <- fread("C:\\Users\\....csv")
dec2021 <- fread("C:\\Users\\....csv")
jan2022 <- fread("C:\\Users\\....csv")
feb2022 <- fread("C:\\Users\\....csv")
mar2022 <- fread("C:\\Users\\....csv")
apr2022 <- fread("C:\\Users\\....csv")
may2022 <- fread("C:\\Users\\....csv")
jun2022 <- fread("C:\\Users\\....csv")
jul2022 <- fread("C:\\Users\\....csv")
aug2022 <- fread("C:\\Users\\....csv")
sep2022 <- fread("C:\\Users\\....csv")
oct2022 <- fread("C:\\Users\\....csv")

#add column of ridelength to each month's dataset
nov2021 <- nov2021 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

dec2021 <- dec2021 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

jan2022 <- jan2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

feb2022 <- feb2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

mar2022 <- mar2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

apr2022 <- apr2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

may2022 <- may2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

jun2022 <- jun2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

jul2022 <- jul2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

aug2022 <- aug2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

sep2022 <- sep2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

oct2022 <- oct2022 %>%
  mutate(ridelength = as.numeric((ended_at - started_at)/60))

#remove all rows from each month where "ridelength" is less than or equal to 0 seconds or greater than or equal to 24 hours (1440 minutes).
nov2021 <- nov2021[ridelength > 0 & ridelength < 1440]
dec2021 <- dec2021[ridelength > 0 & ridelength < 1440]
jan2022 <- jan2022[ridelength > 0 & ridelength < 1440]
feb2022 <- feb2022[ridelength > 0 & ridelength < 1440]
mar2022 <- mar2022[ridelength > 0 & ridelength < 1440]
apr2022 <- apr2022[ridelength > 0 & ridelength < 1440]
may2022 <- may2022[ridelength > 0 & ridelength < 1440]
jun2022 <- jun2022[ridelength > 0 & ridelength < 1440]
jul2022 <- jul2022[ridelength > 0 & ridelength < 1440]
aug2022 <- aug2022[ridelength > 0 & ridelength < 1440]
sep2022 <- sep2022[ridelength > 0 & ridelength < 1440]
oct2022 <- oct2022[ridelength > 0 & ridelength < 1440]

#combine all 12 datasets into one, called "allmonths".

months_list <- list(nov2021, dec2021, jan2022, feb2022, mar2022, apr2022, may2022, jun2022, jul2022, aug2022, sep2022, oct2022)

allmonths <- reduce(months_list, full_join)


#check whether the values of "member_casual" and "rideable type" are unique
unique(allmonths$member_casual)
unique(allmonths$rideable_type)

#display the number of rides by type of rider
allmonths %>%
  group_by(member_casual) %>%
  summarise(n = n())

#create a tibble showing the number of rides by type of rider and type of bike (all months)
#Note: included the "dplyr::" command because "plyr" was loaded first, and we want to use
#the 'count()' function from dplyr
bike_type <- allmonths %>% 
  group_by(member_casual, rideable_type) %>% 
  summarise(n = n())

#creating the dataframe bike_type_by_group_proportions
member_type <- c("member", "casual")
classic <- c(1739728, 894750)
docked <- c(0, 180160)
electric <- c(1661947, 1273179)

bike_type_by_group <- data.frame(member_type, classic, docked, electric)

bike_type_by_group_proportions <- 
  bike_type_by_group %>%
  mutate(classic_proportion = classic/(rowSums(bike_type_by_group[c("classic", "docked", "electric")])),


  docked_proportion = docked/(rowSums(bike_type_by_group[c("classic", "docked", "electric")])),


  electric_proportion = electric/(rowSums(bike_type_by_group[c("classic", "docked", "electric")])))
  

#bar graph comparing the types of bikes used by members and casual users 
bike_type_graph <- ggplot(data = allmonths, aes(x=member_casual, fill = rideable_type)) +
                      geom_bar(position = "fill") +
                      labs(x = "Rider Type", y= "Percentage",
                               title = "Percentage of Rides Using a Particular Bike",
                               caption="Nov. 2021 to Oct. 2022") +
                      scale_x_discrete(labels=c("Casual", "Member")) +
                      scale_y_continuous(labels = scales::percent) +
                      scale_fill_manual(labels = c("Classic", "Docked", "Electric"),
                                        values = c("tan", "darkseagreen1", "plum1")) +
                      guides(fill=guide_legend(title="Type of Bike"))
                        

bike_type_graph


#calculate mean, median and std. dev. of ride length for each rider type
avg_ridelength_table <- allmonths %>%
  group_by(member_casual) %>%
  summarise(avg_ridelength = mean(ridelength)) %>%
  mutate(allmonths %>%
          group_by(member_casual) %>%
          summarise(median_ridelength = median(ridelength))
  ) %>%
  mutate(allmonths %>%
           group_by(member_casual) %>%
           summarise(sd_ridelength = sd(ridelength))
           )
  

#bar chart comparing the mean ride length by rider type
avg_ridelength_graph <- ggplot(data = avg_ridelength_table, aes(x=member_casual, y=median_ridelength, fill=member_casual)) +
  geom_bar(stat="identity")+
  labs(x = "Rider Type", y= "Median Ride length (in minutes)",
       title = "Median Ride Length by Rider Type",
       caption="Nov. 2021 to Oct. 2022") +
  geom_text(aes(label=round(median_ridelength,digits=1)), vjust=2) +
  scale_x_discrete(labels=c("Casual", "Member")) +
  guides(fill=guide_legend(title="Rider Type"))
  
  

avg_ridelength_graph


#Tables of monthly rides by rider type
nov2021_rides_for_plot <- nov2021 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
    mutate(month=c("Nov21", "Nov21"))

dec2021_rides_for_plot <- dec2021 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
    mutate(month=c("Dec21", "Dec21"))

jan2022_rides_for_plot <- jan2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
    mutate(month=c("Jan22", "Jan22"))

feb2022_rides_for_plot <- feb2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
  mutate(month=c("Feb22", "Feb22"))

mar2022_rides_for_plot <- mar2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
    mutate(month=c("Mar22", "Mar22"))

apr2022_rides_for_plot <- apr2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
    mutate(month=c("Apr22", "Apr22"))

may2022_rides_for_plot <- may2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
  mutate(month=c("May22", "May22"))

jun2022_rides_for_plot <- jun2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
  mutate(month=c("Jun22", "Jun22"))

jul2022_rides_for_plot <- jul2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
  mutate(month=c("Jul22", "Jul22"))

aug2022_rides_for_plot <- aug2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
  mutate(month=c("Aug22", "Aug22"))

sep2022_rides_for_plot <- sep2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
  mutate(month=c("Sep22", "Sep22"))

oct2022_rides_for_plot <- oct2022 %>% group_by(member_casual) %>%
  summarise(rides = n()) %>%
  mutate(month=c("Oct22", "Oct22"))

rides_months_for_plot <- rbind(nov2021_rides_for_plot, dec2021_rides_for_plot, jan2022_rides_for_plot,
                          feb2022_rides_for_plot, mar2022_rides_for_plot, apr2022_rides_for_plot, may2022_rides_for_plot,
                          jun2022_rides_for_plot, jul2022_rides_for_plot, aug2022_rides_for_plot, sep2022_rides_for_plot,
                          oct2022_rides_for_plot)


#line graph of the number of rides each month by rider type
rides_months_plot <- ggplot(data=rides_months_for_plot, aes(x=factor(month, level=c("Nov21", "Dec21",
  "Jan22", "Feb22", "Mar22", "Apr22", "May22", "Jun22", "Jul22", "Aug22", "Sep22", "Oct22")), y=rides/100000, group=member_casual)) +
  geom_line(aes(color=member_casual)) + geom_point(aes(color=member_casual)) +
  labs(x = "Month", y= "Number of Rides (in hundreds of thousands)",
       title = "Number of Rides by Month") +
  scale_color_discrete(labels = c("Casual", "Member")) +
  guides(color=guide_legend(title="Rider Type")) +
  theme(axis.text.x = element_text(angle = 45))

rides_months_plot


#create dataframes of average length of ride each month by rider type
nov2021_ridelength_for_plot <- nov2021 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Nov21", "Nov21"))

dec2021_ridelength_for_plot <- dec2021 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Dec21", "Dec21"))

jan2022_ridelength_for_plot <- jan2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Jan22", "Jan22"))

feb2022_ridelength_for_plot <- feb2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Feb22", "Feb22"))

mar2022_ridelength_for_plot <- mar2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Mar22", "Mar22"))

apr2022_ridelength_for_plot <- apr2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Apr22", "Apr22"))

may2022_ridelength_for_plot <- may2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("May22", "May22"))

jun2022_ridelength_for_plot <- jun2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Jun22", "Jun22"))

jul2022_ridelength_for_plot <- jul2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Jul22", "Jul22"))

aug2022_ridelength_for_plot <- aug2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Aug22", "Aug22"))

sep2022_ridelength_for_plot <- sep2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Sep22", "Sep22"))

oct2022_ridelength_for_plot <- oct2022 %>% group_by(member_casual) %>%
  summarise(median_ridelength = median(ridelength)) %>%
  mutate(month=c("Oct22", "Oct22"))

avg_ridelength_month <- rbind(nov2021_ridelength_for_plot, dec2021_ridelength_for_plot, jan2022_ridelength_for_plot,
                               feb2022_ridelength_for_plot, mar2022_ridelength_for_plot, apr2022_ridelength_for_plot, may2022_ridelength_for_plot,
                               jun2022_ridelength_for_plot, jul2022_ridelength_for_plot, aug2022_ridelength_for_plot, sep2022_ridelength_for_plot,
                               oct2022_ridelength_for_plot)

avg_ridelength_month %>%
  group_by(member_casual) %>%
  summarise(sd_month_ridelength = sd(median_ridelength))


#line graph of the average ridelength each month by rider type
avg_ridelength_month_plot <- ggplot(data=avg_ridelength_month,
                                    aes(x=factor(month, level=c("Nov21", "Dec21",
                                      "Jan22", "Feb22", "Mar22", "Apr22", "May22",
                                      "Jun22", "Jul22", "Aug22", "Sep22", "Oct22")),
                                      y=median_ridelength, group=member_casual)) +
                              geom_line(aes(color=member_casual)) +
                              geom_point(aes(color=member_casual)) +
                              labs(x = "Month", y= "Median Ride Length (in minutes)",
                                title = "Median Ride Length by Month") +
                              scale_color_discrete(labels = c("Casual", "Member")) +
                              guides(color=guide_legend(title="Rider Type")) +
                              theme(axis.text.x = element_text(angle = 45))

avg_ridelength_month_plot



#add column to allmonths, identifying the day of the week that a ride was taken

allmonths$day <- weekdays(as.Date(allmonths$started_at), abbreviate = TRUE)

#add column to allmonths, identifying whether the ride was on a weekday or the weekend

allmonths$weekend_weekday <- ifelse(allmonths$day %in% c("Sat", "Sun"), "Weekend", "Weekday")

#add column to allmonth, identifying the time of day that a ride occurred. 

allmonths <- allmonths %>%
  mutate(hour_ride = hour(started_at)) %>%
           mutate(time_of_day = case_when(
             hour_ride >= 00 & hour_ride < 06 ~ "Mid-Night",
             hour_ride >= 06 & hour_ride < 12 ~ "Morning",
             hour_ride >= 12 & hour_ride < 18 ~ "Afternoon",
             hour_ride >= 18 & hour_ride < 24 ~ "Evening"))


#create dataframe "weekday_by_group_percent"

weekday_by_group_percent <- allmonths %>%
  group_by(member_casual, day)%>% 
  summarise(weekday_rides = n()) %>%
  group_by(member_casual) %>%
  mutate(weekday_percent= weekday_rides/sum(weekday_rides))

#calculate the standard deviation of the percentage of rides on each day of the week by rider type
weekday_by_group_percent %>%
  group_by(member_casual) %>%
  summarise(sd_day_proportion = sd(weekday_percent))


#creating dataframe "weekday_by_group_proportions"
mon <- c(489556, 284388)
tue <- c(523558, 263857)
wed <- c(529528, 274889)
thu <- c(532522, 306369)
fri <- c(476570, 338208)
sat <- c(454246, 484261)
sun <- c(395695, 484261)

weekday_by_group_proportions <- data.frame(member_type, mon, tue, wed, thu, fri, sat, sun)

weekday_by_group_proportions <- weekday_by_group_proportions %>%
  mutate(mon_prop = mon/(rowSums(weekday_by_group_proportions[c("mon", "tue", "wed", "thu", "fri", "sat", "sun")])),
         tue_prop = tue/(rowSums(weekday_by_group_proportions[c("mon", "tue", "wed", "thu", "fri", "sat", "sun")])),
         wed_prop = wed/(rowSums(weekday_by_group_proportions[c("mon", "tue", "wed", "thu", "fri", "sat", "sun")])),
         thu_prop = thu/(rowSums(weekday_by_group_proportions[c("mon", "tue", "wed", "thu", "fri", "sat", "sun")])),
         fri_prop = fri/(rowSums(weekday_by_group_proportions[c("mon", "tue", "wed", "thu", "fri", "sat", "sun")])),
         sat_prop = sat/(rowSums(weekday_by_group_proportions[c("mon", "tue", "wed", "thu", "fri", "sat", "sun")])),
         sun_prop = sun/(rowSums(weekday_by_group_proportions[c("mon", "tue", "wed", "thu", "fri", "sat", "sun")])))

#graph showing the proportion of rides on each day of the week by member type
weekday_percent_graph <- ggplot(data = weekday_by_group_percent, aes(x= factor(day, level=c("Mon", "Tue", "Wed", "Thu",
                                "Fri", "Sat", "Sun")), y= weekday_percent, fill=member_casual)) + 
                          geom_bar(stat = "identity", position=position_dodge()) +
                          labs(x = "Day of Week", y= "Percentage of Rides",
                                  title = "Percentage of Rides on Each Day of the Week by Rider Type",
                                  caption="Nov. 2021 to Oct. 2022")+
                          scale_y_continuous(labels = scales::percent) +
                          scale_fill_discrete(labels = c("Casual", "Member")) +
                          guides(fill=guide_legend(title="Rider Type")) 
                

weekday_percent_graph


#create dataframe "weekday_by_group_ridelength" for plot
weekday_median_ridelength <- allmonths %>%
  group_by(member_casual, day) %>%
  summarise(median_ridelength = median(ridelength))

#calculating the standard deviation of the monthly median ridlengths
  weekday_median_ridelength %>%
            group_by(member_casual) %>%
            summarise(weekday_sd_ridelength = sd(median_ridelength))
        

#graph showing the avg. ridelength on each day of the week by rider type
weekday_ridelength_graph <- ggplot(data = weekday_median_ridelength,
                                   aes(x= factor(day, level=c("Mon", "Tue", "Wed", "Thu",
                                  "Fri", "Sat", "Sun")), y= median_ridelength, fill=member_casual)) + 
                            geom_bar(stat = "identity", position="dodge") +
                            labs(x = "Day of Week", y= "Median Ridelength (in minutes)",
                                  title ="Median Ridelength on Each Day of the Week by Rider Type",
                                  caption="Nov. 2021 to Oct. 2022")+
                            scale_fill_discrete(labels = c("Casual", "Member")) +
                            guides(fill=guide_legend(title="Rider Type"))
                            

weekday_ridelength_graph

#creating the dataframe "weekend_weekday_proportions"

weekend_weekday_group <- allmonths %>%
  group_by(member_casual, weekend_weekday)%>% 
  summarise(n = n())

weekend_weekday_group

weekday <- c(2551734, 1467711)
weekend <- c(849941, 880378)

weekend_weekday_proportions <- data.frame(member_type, weekday, weekend)

weekend_weekday_proportions <- weekend_weekday_proportions %>%
  mutate(weekday_prop = weekday/(rowSums(weekend_weekday_proportions[c("weekday", "weekend")])),
         weekend_prop = weekend/(rowSums(weekend_weekday_proportions[c("weekday", "weekend")])))

#graph showing the proportion of rides on weekdays vs. weekends by member type

weekend_weekday_percent_graph <- ggplot(data = allmonths, aes(x=member_casual, fill=weekend_weekday)) +
                                 geom_bar(position = "fill") +
                                 labs(x = "Rider Type", y= "Percentage",
                                      title = "Percentage of Rides on Weekdays vs. Weekends by Rider Type",
                                      caption="Nov. 2021 to Oct. 2022") +
                                 scale_x_discrete(labels=c("Casual", "Member")) +
                                 scale_y_continuous(labels = scales::percent) +
                                 scale_fill_manual(values = c("gold", "aquamarine")) +
                                 guides(fill=guide_legend(title="Part of Week"))
                                 

weekend_weekday_percent_graph


#creating the dataframe "weekend_weekdayweekday_by_group_ridelength <- allmonths_v2 %>%
weekend_weekday_by_group_ridelength <- allmonths %>%
  group_by(member_casual, weekend_weekday) %>%
  summarise(weekend_weekday_median_ridelength = median(ridelength))

#graph showing the avg. ridelength on weekends vs. weekdays by rider type
weekend_weekday_ridelength_graph <- ggplot(data = weekend_weekday_by_group_ridelength,
                                          aes(x= factor(weekend_weekday, level=c("Weekday", "Weekend")),
                                          y= weekend_weekday_median_ridelength, fill=member_casual)) + 
                                    geom_bar(stat = "identity", position="dodge") +
                                    geom_text(aes(label=round(weekend_weekday_median_ridelength,digits=1)), vjust=2,
                                          position = position_dodge(0.9)) +
                                    labs(x = "Part of Week", y= "Median Ridelength (in minutes)",
                                          title = "Median Ridelength on Weekdays vs. Weekends by Rider Type",
                                          caption="Nov. 2021 to Oct. 2022") +
                                    guides(fill=guide_legend(title="Rider Type")) +
                                    scale_fill_discrete(labels = c("Casual", "Member"))
  

weekend_weekday_ridelength_graph


#creating the dataframe "time_of_day_proportions"

time_of_day_group <- allmonths %>%
  group_by(member_casual, time_of_day) %>% 
  summarise(n = n())

time_of_day_group

midnight <- c(122085, 128124)
morning <- c(925556, 440750)
afternoon <- c(1449146, 1064654)
evening <- c(904888, 714561)

time_of_day_proportions <- data.frame(member_type, midnight, morning, afternoon, evening)

time_of_day_proportions <- time_of_day_proportions %>%
  mutate(midnight_prop = midnight/(rowSums(time_of_day_proportions[c("midnight", "morning", "afternoon", "evening")])),
         morning_prop = morning/(rowSums(time_of_day_proportions[c("midnight", "morning", "afternoon", "evening")])),
         afternoon_prop = afternoon/(rowSums(time_of_day_proportions[c("midnight", "morning", "afternoon", "evening")])),
         evening_prop = evening/(rowSums(time_of_day_proportions[c("midnight", "morning", "afternoon", "evening")])))


#graph showing the proportion of rides by time of day and member type
time_of_day_graph <- ggplot(data = allmonths, aes(x=member_casual,
                        fill=factor(time_of_day, levels = c("Mid-Night", "Evening", "Afternoon", "Morning")))) +
                     geom_bar(position = "fill") +
                     labs(x = "Rider Type", y = "Percentage",
                        title = "Percentage of Rides by Time of Day",
                        caption="Nov. 2021 to Oct. 2022") +
                     scale_x_discrete(labels=c("Casual", "Member")) +
                     scale_y_continuous(labels = scales::percent) +
                     scale_fill_manual(values = c("navy", "royalblue1", "cyan1", "lightcyan1")) +
                     guides(fill=guide_legend(title="Time of Day"))
 


time_of_day_graph



