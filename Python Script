import pandas as pd
import numpy as np
import datetime as dt
import matplotlib.pyplot as plt
import seaborn as sns

# Import all datasets. Note the directions of the slash marks
nov2021 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202111-divvy-tripdata.csv")
dec2021 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202112-divvy-tripdata.csv")
jan2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202201-divvy-tripdata.csv")
feb2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202202-divvy-tripdata.csv")
mar2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202203-divvy-tripdata.csv")
apr2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202204-divvy-tripdata.csv")
may2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202205-divvy-tripdata.csv")
jun2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202206-divvy-tripdata.csv")
jul2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202207-divvy-tripdata.csv")
aug2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202208-divvy-tripdata.csv")
sep2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202209-divvy-publictripdata.csv")
oct2022 = pd.read_csv("C:/Users/Scottie/Desktop/Cyclistic_Data/original_data/202210-divvy-tripdata.csv")

# Join all twelve months of data vertically into an 'allmonths' dataset. The 'ignore_index'
# argument removes the indices from the individual month datasets and assigns new indices
# to all observations.
allmonths = pd.concat([nov2021, dec2021, jan2022, feb2022, mar2022, apr2022, may2022, jun2022, jul2022,
                       aug2022, sep2022, oct2022], ignore_index = False)

# Convert the 'started_at' and 'ended_at' columns to datetime64 types
allmonths['started_at'] = pd.to_datetime(allmonths['started_at'])
allmonths['ended_at'] = pd.to_datetime(allmonths['ended_at'])

# Adding a column to allmonths that calculates the length of an individual ride in seconds
allmonths['ridelength'] = (allmonths['ended_at'] - allmonths['started_at']).dt.total_seconds()/60

#Filtering allmonths to only include observations where the 'ridelength' was greater than
# 0 seconds and less than 1440 seconds (AKA 24 hours).
allmonths = allmonths[(allmonths['ridelength'] > 0) & (allmonths['ridelength'] < 1440)]

# Create a column listing the day of the week that a ride started at.
allmonths['day_of_week'] = allmonths['started_at'].dt.day_name()

# Create a column classifying 'Saturday' and 'Sunday' as "weekend" and the other days as 'weekday'.
allmonths['weekpart'] = allmonths['day_of_week'].apply(lambda x: 'weekend' if x in ['Saturday', 'Sunday'] else 'weekday')

# Create a column classifying the time of day (mid-night, morning, afternoon, evening) that a ride started

allmonths['time_of_day'] = allmonths['started_at'].dt.hour.apply(
    lambda x: 'Mid-night' if 0 <= x < 6
    else 'Morning' if 6 <= x < 12
    else 'Afternoon' if 12 <= x < 18
    else 'Evening'
    )

# Create a column containing the month and year.
allmonths['Month_Year'] = allmonths['started_at'].dt.strftime('%b %Y')
print(allmonths.head())

# Determine the unique values of the 'member_casual' and 'rideable_type' columns to see
# if there are any inappropriate values (there are none).
print(allmonths['member_casual'].unique())
print(allmonths['rideable_type'].unique())

# Change the format of the 'member_casual' entries.
allmonths['member_casual'] = allmonths['member_casual'].apply(
    lambda x: 'Member' if x == 'member'
    else 'Casual'
    )

# Calculate the number of rides by membership type.
print(allmonths['member_casual'].value_counts())

# Calculate the mean, median, and standard deviation of 'ridelength' for both membership types.
print(allmonths.groupby('member_casual')['ridelength'].agg(['mean', 'median', 'std']))

# Creating a dataframe to display the median ridelength by membership type
# Using the full dataset to create the plot takes way too long.
median_ridelength_membership = allmonths.groupby('member_casual')['ridelength'].median()

ridelength_by_group = median_ridelength_membership.to_frame()

ridelength_by_group.reset_index(inplace=True)

#Define colors for 'member_casual'
mem_cas_colors = ["#F8766D", "#00BFC4"]

#Bar plot: Median ridelength by membership group
ridelength_bar_overall = sns.barplot(data = ridelength_by_group, x = 'member_casual', y ='ridelength', palette = mem_cas_colors) \
                            .set(title = "Median Ride Length by Rider Type", xlabel='', ylabel='Median Ride Length (in minutes)')


#Calculate the percentage of rides using a particular bike for both membership types.
bikes_by_member = allmonths.groupby('member_casual')['rideable_type'].value_counts(normalize = True)

#Creating a dataframe for the 'bike type' stacked bar chart
bikes_by_member_dataframe = bikes_by_member.to_frame(name = 'proportions')

bikes_by_member_dataframe['proportions'] = bikes_by_member_dataframe['proportions'] * 100

bikes_by_member_dataframe.reset_index(inplace=True)


bikes_member_pivot = pd.pivot_table(bikes_by_member_dataframe, index = 'member_casual', values = 'proportions', columns = 'rideable_type')

#Stacked bar chart: percentage of rides using a particular bike by membership type.
bike_type_bar = bikes_member_pivot.plot(kind = 'bar', stacked = True, color = ['#AF9488', '#A8F49E', 'pink'], \
                                        title = 'Percentage of Rides Using a Particular Bike', xlabel = '', ylabel = '') \
                                        .set_xticklabels(['Casual', 'Member'])
plt.xticks(rotation=0)
plt.legend(['Classic', 'Docked', 'Electric'], bbox_to_anchor=(1, 0.5), loc='center left', title = 'Bike Type')



# Calculate the percentage of rides by time of day for each membership group
time_of_day_table = allmonths.groupby('member_casual')['time_of_day'].value_counts(normalize = True)


#Creating a dataframe for the 'time of day' stacked bar chart.
time_of_day_dataframe = time_of_day_table.to_frame(name = 'proportions')

time_of_day_dataframe['proportions'] = time_of_day_dataframe['proportions'] * 100

time_of_day_dataframe.reset_index(inplace=True)

time_of_day_pivot = pd.pivot_table(time_of_day_dataframe, index = 'member_casual', values = 'proportions', columns = 'time_of_day')

# Stacked bar chart: percentage of each membership group's rides started during each part of the day.
time_of_day_bar = time_of_day_pivot[['Morning', 'Afternoon', 'Evening', 'Mid-night']].plot(kind = 'bar', stacked = True, \
                                                                        color = ['#D0EDFF', '#65A3CB', '#34617D', '#1D3B4D'], \
                                                                        title = 'Percentage of Rides by Time of Day', xlabel = '', ylabel = '') \
                                                                        .set_xticklabels(['Casual', 'Member'])
plt.xticks(rotation=0)
plt.legend(bbox_to_anchor=(1, 0.5), loc='center left', title = 'Time of Day')

#Calculate the percentage of rides taken on each day of the week for each membership group
day_of_week_percent = allmonths.groupby('member_casual')['day_of_week'].value_counts(normalize = True)


#Creating the dataframe for the side-by-side barplot
day_of_week_percent_dataframe = day_of_week_percent.to_frame(name = 'proportions')

day_of_week_percent_dataframe['proportions'] = day_of_week_percent_dataframe['proportions'] * 100

day_of_week_percent_dataframe.reset_index(inplace=True)

# Stacked bar chart: percentage of each membership group's rides started during each day of the week.
daily_percentage_bar = sns.barplot(data = day_of_week_percent_dataframe, x = 'day_of_week', y = 'proportions', hue = 'member_casual', palette = mem_cas_colors, \
                                   order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']).set(title = 'Percentage of Rides on Each Day of the Week', \
                                                                                                        xlabel = '', ylabel = 'percent')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1, 0.5), loc='center left', title = '')

#Calculating the standard deviations of the daily percentages
day_of_week_percent_dataframe.groupby('member_casual').std()




# Calculate the median ridelength on each day of the week for each membership group.
day_of_week_ridelength = allmonths.groupby(['member_casual', 'day_of_week'])['ridelength'].median()


#Creating the dataframe for the pointplot
day_of_week_ridelength_dataframe = day_of_week_ridelength.to_frame(name = 'ridelength')

day_of_week_ridelength_dataframe.reset_index(inplace=True)

daily_ridelength_pointplot = sns.pointplot(data = day_of_week_ridelength_dataframe, x = 'day_of_week', y = 'ridelength', hue = 'member_casual', palette = mem_cas_colors, \
                                           order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']).set(title = 'Median Ridelength on Each Day of the Week', \
                                                                                                         xlabel = '', ylabel = 'Ride Length (in minutes)')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1, 0.5), loc='center left', title = '')
plt.ylim(0, 16)


#Calculating the standard deviations of the daily median ridelengths.
day_of_week_ridelength_dataframe.groupby('member_casual').std()



#Calculating the percentage of rides taken on each part of the week by each membership group.
weekpart_table = allmonths.groupby('member_casual')['weekpart'].value_counts(normalize = True)

#Creating a dataframe for the 'part of the week' stacked bar chart.
weekpart_dataframe = weekpart_table.to_frame(name = 'proportions')

weekpart_dataframe['proportions'] = weekpart_dataframe['proportions'] * 100
weekpart_dataframe.reset_index(inplace=True)

weekpart_pivot = pd.pivot_table(weekpart_dataframe, index = 'member_casual', values = 'proportions', columns = 'weekpart')


# Stacked bar chart: percentage of each membership group's rides started during each part of the day.
weekpart_percent_bar = weekpart_pivot.plot(kind = 'bar', stacked = True, color = ['gold', 'green'], \
                                        title = 'Percentage of Rides on Weekdays vs. Weekends', xlabel = '', ylabel = '') \
                                        .set_xticklabels(['Casual', 'Member'])
plt.xticks(rotation=0)
plt.legend(['Weekday', 'Weekend'], bbox_to_anchor=(1, 0.5), loc='center left', title = 'Part of Week')


#Calculating the median ridelength during each part of the week for both membership groups.
weekpart_ridelength = allmonths.groupby(['member_casual', 'weekpart'])['ridelength'].median()


#Creating the dataframe for the 'weekpart' side-by-side barplot
weekpart_ridelength_dataframe = weekpart_ridelength.to_frame(name = 'ridelength')

weekpart_ridelength_dataframe.reset_index(inplace=True)

#Bar plot: Median ridelength by part of week and membership group
weekpart_ridelength_bar = sns.barplot(data = weekpart_ridelength_dataframe, x = 'weekpart', y = 'ridelength', hue = 'member_casual', palette = mem_cas_colors) \
                            .set(title = "Median Ride Length on Weekdays vs. Weekends", xlabel='', ylabel='Median Ride Length (in minutes)', \
                                 xticklabels=["Weekdays", "Weekends"])
plt.legend([],[], frameon=False)

# Calculate the median ridelength over the year for each membership group.
year_ridelength = allmonths.groupby(['member_casual', 'Month_Year'])['ridelength'].median()


#Creating the dataframe for the monthly median ridelength pointplot
year_ridelength_dataframe = year_ridelength.to_frame(name = 'ridelength')

year_ridelength_dataframe.reset_index(inplace=True)

#Point plot: median ridelength for each month
ridelength_monthly_pointplot = sns.pointplot(data = year_ridelength_dataframe, x = 'Month_Year', y = 'ridelength', hue = 'member_casual', palette = mem_cas_colors, \
                                             order = ['Nov 2021', 'Dec 2021', 'Jan 2022', 'Feb 2022', 'Mar 2022', 'Apr 2022', 'May 2022', 'Jun 2022', 'Jul 2022', 'Aug 2022', 'Sep 2022', 'Oct 2022']) \
                                              .set(title = 'Median Ride Length by Month', xlabel = '', ylabel = 'Ride Length (in minutes)')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1, 0.5), loc='center left', title = '')

#Calculating the standard deviations of the daily median ridelengths.
year_ridelength_dataframe.groupby('member_casual').std()



#Calculating the number of rides during each month
year_ride_table = allmonths.groupby('member_casual')['Month_Year'].value_counts()

#Creating the dataframe for the monthly rides pointplot
year_ride_dataframe = year_ride_table.to_frame(name = 'rides')

year_ride_dataframe.reset_index(inplace=True)


# Point plot: number of rides during each month
rides_monthly_pointplot = sns.pointplot(data = year_ride_dataframe, x = 'Month_Year', y = 'rides', hue = 'member_casual', palette = mem_cas_colors, \
                                        order = ['Nov 2021', 'Dec 2021', 'Jan 2022', 'Feb 2022', 'Mar 2022', 'Apr 2022', 'May 2022', 'Jun 2022', 'Jul 2022', 'Aug 2022', 'Sep 2022', 'Oct 2022']) \
                                        .set(title = 'Number of Rides by Month', xlabel = '', ylabel = '# of Rides')
plt.xticks(rotation=45)
plt.legend(bbox_to_anchor=(1, 0.5), loc='center left', title = '')

